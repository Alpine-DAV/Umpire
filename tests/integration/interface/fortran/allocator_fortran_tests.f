! Generated by genumpireftests.py



module umpire_fortran_generated_tests

  use iso_c_binding
  use fruit
  use umpire_mod
  implicit none

  contains



  subroutine test_allocate_int_array_1d
    use iso_c_binding

    type(UmpireResourceManager) rm
    type(UmpireAllocator) allocator

    integer(C_INT), pointer, dimension(:) :: array

    rm = rm%get_instance()
    allocator = rm%get_allocator_by_id(0)


    call allocator%allocate(array, [10])
    call assert_true(associated(array))

    array(0) = 1

    call allocator%deallocate(array)
    call assert_true(.not. associated(array))

  end subroutine test_allocate_int_array_1d



  subroutine test_allocate_int_array_2d
    use iso_c_binding

    type(UmpireResourceManager) rm
    type(UmpireAllocator) allocator

    integer(C_INT), pointer, dimension(:, :) :: array

    rm = rm%get_instance()
    allocator = rm%get_allocator_by_id(0)


    call allocator%allocate(array, [10, 10])
    call assert_true(associated(array))

    array(0, 0) = 1

    call allocator%deallocate(array)
    call assert_true(.not. associated(array))

  end subroutine test_allocate_int_array_2d



  subroutine test_allocate_int_array_3d
    use iso_c_binding

    type(UmpireResourceManager) rm
    type(UmpireAllocator) allocator

    integer(C_INT), pointer, dimension(:, :, :) :: array

    rm = rm%get_instance()
    allocator = rm%get_allocator_by_id(0)


    call allocator%allocate(array, [10, 10, 10])
    call assert_true(associated(array))

    array(0, 0, 0) = 1

    call allocator%deallocate(array)
    call assert_true(.not. associated(array))

  end subroutine test_allocate_int_array_3d



  subroutine test_allocate_int_array_4d
    use iso_c_binding

    type(UmpireResourceManager) rm
    type(UmpireAllocator) allocator

    integer(C_INT), pointer, dimension(:, :, :, :) :: array

    rm = rm%get_instance()
    allocator = rm%get_allocator_by_id(0)


    call allocator%allocate(array, [10, 10, 10, 10])
    call assert_true(associated(array))

    array(0, 0, 0, 0) = 1

    call allocator%deallocate(array)
    call assert_true(.not. associated(array))

  end subroutine test_allocate_int_array_4d



  subroutine test_allocate_long_array_1d
    use iso_c_binding

    type(UmpireResourceManager) rm
    type(UmpireAllocator) allocator

    integer(C_LONG), pointer, dimension(:) :: array

    rm = rm%get_instance()
    allocator = rm%get_allocator_by_id(0)


    call allocator%allocate(array, [10])
    call assert_true(associated(array))

    array(0) = 1

    call allocator%deallocate(array)
    call assert_true(.not. associated(array))

  end subroutine test_allocate_long_array_1d



  subroutine test_allocate_long_array_2d
    use iso_c_binding

    type(UmpireResourceManager) rm
    type(UmpireAllocator) allocator

    integer(C_LONG), pointer, dimension(:, :) :: array

    rm = rm%get_instance()
    allocator = rm%get_allocator_by_id(0)


    call allocator%allocate(array, [10, 10])
    call assert_true(associated(array))

    array(0, 0) = 1

    call allocator%deallocate(array)
    call assert_true(.not. associated(array))

  end subroutine test_allocate_long_array_2d



  subroutine test_allocate_long_array_3d
    use iso_c_binding

    type(UmpireResourceManager) rm
    type(UmpireAllocator) allocator

    integer(C_LONG), pointer, dimension(:, :, :) :: array

    rm = rm%get_instance()
    allocator = rm%get_allocator_by_id(0)


    call allocator%allocate(array, [10, 10, 10])
    call assert_true(associated(array))

    array(0, 0, 0) = 1

    call allocator%deallocate(array)
    call assert_true(.not. associated(array))

  end subroutine test_allocate_long_array_3d



  subroutine test_allocate_long_array_4d
    use iso_c_binding

    type(UmpireResourceManager) rm
    type(UmpireAllocator) allocator

    integer(C_LONG), pointer, dimension(:, :, :, :) :: array

    rm = rm%get_instance()
    allocator = rm%get_allocator_by_id(0)


    call allocator%allocate(array, [10, 10, 10, 10])
    call assert_true(associated(array))

    array(0, 0, 0, 0) = 1

    call allocator%deallocate(array)
    call assert_true(.not. associated(array))

  end subroutine test_allocate_long_array_4d



  subroutine test_allocate_float_array_1d
    use iso_c_binding

    type(UmpireResourceManager) rm
    type(UmpireAllocator) allocator

    real(C_FLOAT), pointer, dimension(:) :: array

    rm = rm%get_instance()
    allocator = rm%get_allocator_by_id(0)


    call allocator%allocate(array, [10])
    call assert_true(associated(array))

    array(0) = 1

    call allocator%deallocate(array)
    call assert_true(.not. associated(array))

  end subroutine test_allocate_float_array_1d



  subroutine test_allocate_float_array_2d
    use iso_c_binding

    type(UmpireResourceManager) rm
    type(UmpireAllocator) allocator

    real(C_FLOAT), pointer, dimension(:, :) :: array

    rm = rm%get_instance()
    allocator = rm%get_allocator_by_id(0)


    call allocator%allocate(array, [10, 10])
    call assert_true(associated(array))

    array(0, 0) = 1

    call allocator%deallocate(array)
    call assert_true(.not. associated(array))

  end subroutine test_allocate_float_array_2d



  subroutine test_allocate_float_array_3d
    use iso_c_binding

    type(UmpireResourceManager) rm
    type(UmpireAllocator) allocator

    real(C_FLOAT), pointer, dimension(:, :, :) :: array

    rm = rm%get_instance()
    allocator = rm%get_allocator_by_id(0)


    call allocator%allocate(array, [10, 10, 10])
    call assert_true(associated(array))

    array(0, 0, 0) = 1

    call allocator%deallocate(array)
    call assert_true(.not. associated(array))

  end subroutine test_allocate_float_array_3d



  subroutine test_allocate_float_array_4d
    use iso_c_binding

    type(UmpireResourceManager) rm
    type(UmpireAllocator) allocator

    real(C_FLOAT), pointer, dimension(:, :, :, :) :: array

    rm = rm%get_instance()
    allocator = rm%get_allocator_by_id(0)


    call allocator%allocate(array, [10, 10, 10, 10])
    call assert_true(associated(array))

    array(0, 0, 0, 0) = 1

    call allocator%deallocate(array)
    call assert_true(.not. associated(array))

  end subroutine test_allocate_float_array_4d



  subroutine test_allocate_double_array_1d
    use iso_c_binding

    type(UmpireResourceManager) rm
    type(UmpireAllocator) allocator

    real(C_DOUBLE), pointer, dimension(:) :: array

    rm = rm%get_instance()
    allocator = rm%get_allocator_by_id(0)


    call allocator%allocate(array, [10])
    call assert_true(associated(array))

    array(0) = 1

    call allocator%deallocate(array)
    call assert_true(.not. associated(array))

  end subroutine test_allocate_double_array_1d



  subroutine test_allocate_double_array_2d
    use iso_c_binding

    type(UmpireResourceManager) rm
    type(UmpireAllocator) allocator

    real(C_DOUBLE), pointer, dimension(:, :) :: array

    rm = rm%get_instance()
    allocator = rm%get_allocator_by_id(0)


    call allocator%allocate(array, [10, 10])
    call assert_true(associated(array))

    array(0, 0) = 1

    call allocator%deallocate(array)
    call assert_true(.not. associated(array))

  end subroutine test_allocate_double_array_2d



  subroutine test_allocate_double_array_3d
    use iso_c_binding

    type(UmpireResourceManager) rm
    type(UmpireAllocator) allocator

    real(C_DOUBLE), pointer, dimension(:, :, :) :: array

    rm = rm%get_instance()
    allocator = rm%get_allocator_by_id(0)


    call allocator%allocate(array, [10, 10, 10])
    call assert_true(associated(array))

    array(0, 0, 0) = 1

    call allocator%deallocate(array)
    call assert_true(.not. associated(array))

  end subroutine test_allocate_double_array_3d



  subroutine test_allocate_double_array_4d
    use iso_c_binding

    type(UmpireResourceManager) rm
    type(UmpireAllocator) allocator

    real(C_DOUBLE), pointer, dimension(:, :, :, :) :: array

    rm = rm%get_instance()
    allocator = rm%get_allocator_by_id(0)


    call allocator%allocate(array, [10, 10, 10, 10])
    call assert_true(associated(array))

    array(0, 0, 0, 0) = 1

    call allocator%deallocate(array)
    call assert_true(.not. associated(array))

  end subroutine test_allocate_double_array_4d



end module umpire_fortran_generated_tests


program fortran_test
  use fruit
  use umpire_fortran_generated_tests

  implicit none
  logical ok

  call init_fruit

  call test_allocate_int_array_1d
  call test_allocate_int_array_2d
  call test_allocate_int_array_3d
  call test_allocate_int_array_4d
  call test_allocate_long_array_1d
  call test_allocate_long_array_2d
  call test_allocate_long_array_3d
  call test_allocate_long_array_4d
  call test_allocate_float_array_1d
  call test_allocate_float_array_2d
  call test_allocate_float_array_3d
  call test_allocate_float_array_4d
  call test_allocate_double_array_1d
  call test_allocate_double_array_2d
  call test_allocate_double_array_3d
  call test_allocate_double_array_4d

  call fruit_summary
  call fruit_finalize

  call is_all_successful(ok)
  if (.not. ok) then
    call exit(1)
  endif
end program fortran_test

